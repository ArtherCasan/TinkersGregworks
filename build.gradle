buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
    }
}

apply plugin: 'forge'

file "build.properties" withReader {
    def prop = new Properties()
    prop.load(it)
    ext.config = new ConfigSlurper().parse prop
}

version = "${config.minecraft.version}-${config.tgregworks.version}"
group= "vexatos.tgregworks" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "TGregworks"

repositories {
    maven {
        name = 'Forge'
        url = 'http://files.minecraftforge.net/maven'
    }
    
    maven { // TConstruct, Mantle
        name = 'DVS1 Maven FS'
        url = 'http://dvs1.progwml6.com/files/maven'
    }

    ivy {
        name = 'gtnh_download_source_stupid_underscore_typo'
        artifactPattern("http://downloads.gtnewhorizons.com/Mods_for_Jenkins/[module]_[revision].[ext]")
    }

    ivy { // GregTech
        name = 'gtnh_download_source'
        artifactPattern("http://downloads.gtnewhorizons.com/Mods_for_Jenkins/[module]-[revision].[ext]")
    }

    ivy { // CoFH Core, TiCToolTips, IguanaTinkerTweaks
        name = 'gtnh_download_source_dev'
        artifactPattern("http://downloads.gtnewhorizons.com/Dev-Pack/Files/mods/[module]-[revision].[ext]")
    }
}

configurations {
    provided
    embedded
    compile.extendsFrom provided, embedded
    all*.exclude group: "codechicken"
}

dependencies {
    //compile "codechicken:CodeChickenCore:1.7.10-1.0.2.9:dev"
    //compile "codechicken:NotEnoughItems:1.7.10-1.0.2.15:dev"
    compileOnly "mantle:Mantle:${config.minecraft.version}-${config.mantle.version}:deobf"
    compileOnly "tconstruct:TConstruct:${config.minecraft.version}-${config.tconstruct.version}:deobf"
    compileOnly "gregtech:gregtech-${config.gregtech.version}:dev"

    compileOnly name: 'CoFHCore', version: "${config.cofhcore.version}", ext: 'jar'
    compileOnly name: 'TiCTooltips', version: "mc${config.minecraft.version}-${config.tictooltips.version}", ext: 'jar'
    compileOnly name: 'IguanaTinkerTweaks', version: "${config.minecraft.version}-${config.iguanatinkertweaks.version}", ext: 'jar'
}

minecraft {
    version = "${config.minecraft.version}-${config.forge.version}"
    runDir = "eclipse"

    replaceIn "vexatos/tgregworks/TGregworks.java"
    replace "@VERSION@", "${config.tgregworks.version}"
}

sourceSets {
    main {
        output.resourcesDir = 'build/classes/main'
    }
}

apply plugin: 'idea'
idea {
    module {
        scopes.PROVIDED.plus += [configurations.provided]
        outputDir = file('build/classes/main')
    }
}

processResources
{
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}


//For Building

def libDir = './build/libs'

task deobfJar(type: Jar) {
    description = 'Creates a jar file containing the non-obfuscated class files'
    classifier = 'deobf'
    destinationDir = file(libDir)
    from sourceSets.main.output.classesDir
}

task apiZip(type: Zip) {
    description = 'Creates a zip file containing the API source files only'
    classifier = 'api'
    destinationDir = file(libDir)
    from sourceSets.main.allSource
    include 'vexatos/**/api/**'
}

task makeJars << {
    description = 'Creates the mod files'
}

makeJars.dependsOn clean, build, deobfJar, apiZip
build.shouldRunAfter clean
deobfJar.shouldRunAfter build
apiZip.shouldRunAfter deobfJar

